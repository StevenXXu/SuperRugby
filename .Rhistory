#      rankChange[index] <- 0
#    } else {
#      rankChange[index] <- as.numeric(tabs2[[3]][i,14])
#    }
#  }
#}
for(i in 1:length(tabs1[[3]][,14])){
index <- which(teams == tabs1[[3]][i,2])
if(length(index) != 0){
rankScore[index] <- as.numeric(tabs1[[3]][i,14])
}
}
saveRDS(rank, "rank.rda")
saveRDS(rankScore, "rankScore.rda")
#saveRDS(rankChange, "rankChange.rda")
teamLoop <- tolower(gsub(" ", "", teams, fixed = TRUE))
# Get match data
matchDate <- NULL
homeTeam <- NULL
scores <- NULL
awayTeam <- NULL
otherVarList <- list()
#### Construct SR data set ####
# The Teams
teams <- c("Blues","Bulls","Chiefs","Highlanders","Lions","Reds","Southern Kings","Waratahs","Brumbies"
,"Cheetahs","Crusaders","Hurricanes","Melbourne Rebels","Sharks","Stormers","Western Force")
saveRDS(teams, "teamNames.rda")
# Get rank data
library(XML)
library(RCurl)
Nteams <- length(teams)
rank <- numeric(Nteams)
rankScore <- numeric(Nteams)
rankChange <- numeric(Nteams)
urlRankScore <- "https://en.wikipedia.org/wiki/2015_Super_Rugby_season"
tabs1 <- getURL(urlRankScore)
tabs1 <- readHTMLTable(tabs1, stringsAsFactors = F)
#urlRankScore <- "http://www.rugby15.co.za/irb-world-rankings/"
#tabs1 <- getURL(urlRankScore)
#tabs1 <- readHTMLTable(tabs1)
#tabs1[[1]][,3] <- sapply(tabs1[[1]][,3], function(x) substr(x, 1, nchar(as.character(x))-4))
tabs1[[3]][,2][tabs1[[3]][,2] == "Rebels"] <- "Melbourne Rebels"
tabs1[[3]][,2][tabs1[[3]][,2] == "Force"] <- "Western Force"
tabs1[[3]][,14] <- as.numeric(as.character(tabs1[[3]][,14])) #rankscore - total points
tabs1[[3]][,1] <- as.numeric(as.character(tabs1[[3]][,1])) #rank - position
for(i in 1:length(tabs1[[3]][,1])){
index <- which(teams == tabs1[[3]][i,2])
if(length(index) != 0){
rank[index] <- as.numeric(tabs1[[3]][i,1])
}
}
#urlRank <- "https://en.wikipedia.org/wiki/2014_Super_Rugby_season"
#tabs2 <- getURL(urlRank)
#tabs2 <- readHTMLTable(tabs2, stringsAsFactors = F)
#for(i in 1:length(tabs2[[3]][,1])){
#  index <- which(teams == tabs2[[3]][i,14])
#  if(length(index) != 0){
#    rank[index] <- as.numeric(tabs2[[3]][i,1])
#    if(tabs2[[3]][i,14] == ""){
#      rankChange[index] <- 0
#    } else {
#      rankChange[index] <- as.numeric(tabs2[[3]][i,14])
#    }
#  }
#}
for(i in 1:length(tabs1[[3]][,14])){
index <- which(teams == tabs1[[3]][i,2])
if(length(index) != 0){
rankScore[index] <- as.numeric(tabs1[[3]][i,14])
}
}
saveRDS(rank, "rank.rda")
saveRDS(rankScore, "rankScore.rda")
#saveRDS(rankChange, "rankChange.rda")
teamLoop <- tolower(gsub(" ", "", teams, fixed = TRUE))
# Get match data
matchDate <- NULL
homeTeam <- NULL
scores <- NULL
awayTeam <- NULL
otherVarList <- list()
for(i in 1:Nteams){
fileUrl <- paste("http://www.rugbydata.com/superrugby/", teamLoop[i], "/gamesplayed/", sep="")
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
matchDate <- c(matchDate, xpathSApply(doc, "//td[@class='match-date']", xmlValue))
homeTeam <- c(homeTeam, xpathSApply(doc, "//td[@class='home-team']", xmlValue))
scores <- c(scores, xpathSApply(doc, "//a[@class='match-score']", xmlValue))
awayTeam <- c(awayTeam, xpathSApply(doc, "//td[@class='away-team']", xmlValue))
otherVarList[[i]] <- as.numeric(xpathSApply(doc, "//span[@class='rdnumeric']", xmlValue))
}
source('~/SuperRugby/GetSRData.R')
View(interData)
str(remove)
remove
interData[,1]=="draw"
interData[,1]=="loose"
interData[,2]
source('~/SuperRugby/GetSRData.R')
interData[,3]
source('~/SuperRugby/GetSRData.R')
source('~/SuperRugby/GetSRData.R')
source('~/SuperRugby/GetSRData.R')
View(interData)
teams
nrow(interData)
source('~/SuperRugby/GetSRData.R')
length(teams)
interData[,2]
interData[,3]
team
source('~/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
View(data)
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
newCase
setwd("C:/Users/ausxx000/Desktop/SuperRugby")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
length(homeTeamStats)
teamStats
length(teamStats)
length(rank)
ncol(teamStats)
ncol(teamStats[[1]])
rank
nrow(teamStats)
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
newdata
load("C:/Users/ausxx000/Desktop/SuperRugby/newCase.rda")
newCase <- readRDS("newCase.rda")
str(newCase)
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
newCase <- readRDS("newCase.rda")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks")
newCase <- readRDS("newCase.rda")
str(newCase)
model <- readRDS(file = "RWC_Prediction_Model.rda")
str(model)
str(newCase)
## Load Library
library(caret)
library(randomForest)
library(lubridate)
## Load Pre-trained model
model <- readRDS(file = "RWC_Prediction_Model.rda")
## Load predictors
teamStats <- readRDS(file="teamStats.rda")
rank <- readRDS("rank.rda")
rankScore <- readRDS("rankScore.rda")
#rankChange <- readRDS("rankChange.rda")
teams <- readRDS("teamNames.rda")
homeIndex <- which(teams == "Waratahs")
awayIndex <- which(teams == "Blues")
awayIndex <- which(teams == "Sharks")
homeTeamStats <- c(teamStats[[homeIndex]], rank[homeIndex], rankScore[homeIndex])
awayTeamStats <- c(teamStats[[awayIndex]], rank[awayIndex], rankScore[awayIndex])
str(homeTeamStats)
newCase[23]
newCase[7]
newCase[1,7]
date <- Sys.Date()
levelsx <- levels(factor(teams))
levelsy <- levels(factor(c("loose","win")))
newCase <- readRDS("newCase.rda")
newCase[1,2] <- homeTeam
newCase[1,3] <- awayTeam
newCase[1,4] <- date
newCase[1,5] <- factor(month(date))
newCase[1,6] <- factor(year(date))
newCase[1,7:29] <- homeTeamStats
newCase[1,30:52] <- awayTeamStats
str(newCase)
View(data)
data[1,]
newCase
month(date)
str(newCase)
newCase[1,5] <- factor(month(date))
newCase[1,5] <- month(date)
nrow(newCase)
ncol(newCase)
newCase[1,1]
newCase[1,2]
newCase[1,2] <- homeTeam
newCase <- readRDS("newCase.rda")
newCase
newCase[1,2] <- homeTeam
homeTeam
homeTeam <- "Waratahs"
awayTeam <- "Sharks"
newCase[1,2] <- homeTeam
newCase[1,3] <- awayTeam
date
date
newCase[1,5] <- factor(month(date))
newCase[1,5] <- as.numeric(factor(month(date)))
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
str(data)
newCase <- data[1,]
str(newCase)
date
newCase[1,5] <- factor(month(date))
newCase[1,5]
newCase <- data[1,]
newCase[1,5]
newCase[1,5] <- month(date)
newCase[1,5]
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Waratahs","Sharks",5,2015)
predict_match("Waratahs","Sharks",6,2015)
predict_match("Waratahs","Sharks",6,2016)
predict_match("Waratahs","Sharks",3,2016)
predict_match("Waratahs","Sharks",3,2015)
predict_match("Lions","Brumbies",5,2015)
predict_match("Brumbies","Lions",5,2015)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dataCor
str(dataCor)
source('~/.active-rstudio-document')
str(dataCor)
source('~/.active-rstudio-document')
str(dataCor)
ggplot(data, aes(RankAway, RankHome, color=Outcome)) + geom_point() + geom_smooth()
testIndex <- seq(360,400,2)
train <- data[-testIndex,]
test <- data[testIndex,]
# Train classifiers
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
# Load libraries
library(caret)
library(randomForest)
# Model tuning grids
rfGrid <-  expand.grid(mtry = c(1, 7, 14, 27, 40, 53))
# Tune using 5-fold cross-validation
fitControl <- trainControl(method = "cv",
number = 5,
repeats = 1)
install.packages("doParallel")
# Train classifiers
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
# Load libraries
library(caret)
library(randomForest)
# Model tuning grids
rfGrid <-  expand.grid(mtry = c(1, 7, 14, 27, 40, 53))
# Tune using 5-fold cross-validation
fitControl <- trainControl(method = "cv",
number = 5,
repeats = 1)
# Random Forests
start.time <- Sys.time()
set.seed(2)
rf <- train(x=train[,-1], y=train[,1], method="rf", ntree=200, trControl=fitControl, tuneGrid=rfGrid, importance=TRUE)
end.time <- Sys.time()
time.taken.rf <- end.time - start.time
time.taken.rf
trControl
plot(rf)
summary(rf)
seq(360,400,2)
seq(1000,1600,2)
source('~/.active-rstudio-document')
table(tr,test$Outcome)
tr[,1]
str(tr)
tr[,2]
plot(TR)
plot(tr)
predict_match("Waratahs","Sharks",5,2015)
predict_match("Hurricanse","Chiefs",5,2015)
predict_match("Hurricanes","Chiefs",5,2015)
predict_match("Lions","Brumbies",5,2015)
predict_match("Cheetahs","Highlanders",5,2015)
install.packages("ROCR")
library(ROCR)
trpred <- prediction(tr[,2],test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf)
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
test$Outcome
nrow(tr)
seq(1000,1685,1)
str(tr)
tr$loose
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
result <- NULL
actual <- NULL
for(i in 1:nrow(tr)){
if(tr[i,1]<0.5){
result[i]=1
}else{
result[i]=0
}
}
for(i in 1:nrow(test)){
if(test[i,1]=="loose"){
actual[i]=0
}else{
actual[i]=1
}
}
trpred <- prediction(result,actual)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
trpred <- prediction(tr[,1],test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
trpred <- prediction(tr[,2],test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
data$year
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
data <- readRDS("RWCData.rda")
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
setwd("~/RWCPrediction-master")
source('~/RWCPrediction-master/GetRWCData.R')
source('~/RWCPrediction-master/testCase.R')
source('~/RWCPrediction-master/testCase.R')
source('~/RWCPrediction-master/testCase.R')
model$results
setwd("C:/Users/ausxx000/Desktop/SuperRugby")
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
interData <- interData[interData$year > 2010,]
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
model.tables()
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
tr <- predict(model, test, type="raw")
trpred <- prediction(tr[,2],test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
str(tr)
trpred <- prediction(tr,test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
tr
test$Outcome
tr
test$Outcome
trpred <- prediction(tr,test$Outcome)
varImpPlot(model)
comparea <- data.frame(tr,test$Outcome)
View(comparea)
View(comparea)
write.csv(comparea)
write.csv(file=comparea)
write.csv(comparea,file="result.csv")
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
