abline(a=0,b=1,lwd=2,lty=2,col="gray")
str(tr)
trpred <- prediction(tr,test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
tr
test$Outcome
tr
test$Outcome
trpred <- prediction(tr,test$Outcome)
varImpPlot(model)
comparea <- data.frame(tr,test$Outcome)
View(comparea)
View(comparea)
write.csv(comparea)
write.csv(file=comparea)
write.csv(comparea,file="result.csv")
model$results
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
load("C:/Users/ausxx000/Desktop/SuperRugby/RWCData.rda")
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
data$year
[nrow(data$year=="2015")
nrow(data$year=="2015")
nrow(data[,5]=="2015")
data$year=="2015"
length(data$year=="2015")
length(data$year=="2015")
year <- data.frame(data$year)
View(year)
View(year)
nrow(year)
nrow(year=="2015")
str(year)
library(randomForest)
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
data$`LongestLosingStreak Home
;
q
q1
)
""
''
`
data$LongestLosingStreak Home
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
tr
varImpPlot(model,class="Yes", main="Class= Yes Importance plots")
varImpPlot(model,class="No", main="Class= No Importance plots")
tr <- predict(model, train, type="prob")
trpred <- prediction(tr,test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
trpred <- prediction(tr[,2],test$Outcome)
trperf <- performance(trpred,"tpr","fpr")
plot(trperf,main="ROC Curve for Random Forest",col=2,lwd=2)
tr[,2]
tr <- predict(model, test, type="raw")
tr <- predict(model, test, type="response")
tr
result <- data.frame(tr,test$Outcome)
write.csv(result,file="result.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model
model$finalModel
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model
model$finalModel
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$finalModel
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$finalModel
model
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model
model$finalModel
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
model$finalModel
model
test
tr_raw <- predict(model, test, type="raw")
result <- data.frame(tr_raw,test)
write.csv(result,file="result.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/test.R')
write.csv(result,file="result.csv")
tr
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
## Load Library
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Lions","Hurricanes",2,2015)
predict_match("Lions","Hurricanes",3,2015)
newCase
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Lions","Hurricanes",3,2015)
predict_match("Lions","Hurricanes",3,2014)
predict_match("Lions","Hurricanes",3,2012)
predict_match("Lions","Hurricanes",5,2012)
predict_match("Lions","Hurricanes",5,2015)
predict_match("Lions","Hurricanes",4,2015)
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Lions","Hurricanes",2,2015)
predict_match("Brumbies","Reds",2,2015)
predict_match("Crusaders","Melbourne Force",2,2015)
predict_match("Crusaders","Melbourne Rebels",2,2015)
predict_match("Blues","Chiefs",2,2015)
predict_match("Bulls","Stomers",2,2015)
predict_match("Bulls","Stormers",2,2015)
predict_match("Sharks","Cheetahs",2,2015)
predict_match("Waratahs","Western Force",2,2015)
predict_match("Bulls","Hurricanes",2,2015)
predict_match("Chiefs","Brumbies",2,2015)
predict_match("Melbourne Rebels","Waratahs",2,2015)
predict_match("Highlanders","Crusaders",2,2015)
predict_match("Chiefs","Highlanders",3,2015)
library(XML)
library(RCurl)
urlRankScore <- "http://live.nrlstats.com/nrl/season2015.html"
tabs1 <- getURL(urlRankScore)
tabs1 <- readHTMLTable(tabs1, stringsAsFactors = F)
View(tabs1)
tabs1
source('~/.active-rstudio-document')
tabs1
tabs1[[1]]
tabs1[[1]][,1]
tabs1[,1]
tabs1[1,1]
tabs1[[1]][,1]
tabs1[[1]][,2]
tabs1[[1]][,3]
source('~/.active-rstudio-document')
tabs1[[1]][,3]
tabs1[[1]]
source('~/.active-rstudio-document')
tabs1
str(tabs1)
tabs1[[1]]
tabs1[[2]]
tabs1[[3]]
tabs1[[4]]
source('~/.active-rstudio-document')
str(tabs1)
tabs1[[1]]
source('~/.active-rstudio-document')
str(tabs1)
tabs1[[1]][,2]
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
str(data)
write.csv(data,file="SR_result.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_round("R2015_SR.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_round("R2015_SR.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_round("R2015_SR.csv")
predict_round("R2015_SR.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_match("Crusaders","Melbourne Rebels",2,2015)
predict_match("Brambies","Reds",2,2015)
predict_match("Brumbies","Reds",2,2015)
predict_match("Lions","Hurricanes",2,2015)
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_round("R2015_SR.csv")
source('C:/Users/ausxx000/Desktop/SuperRugby/model_SR.R')
predict_round("R2015_SR.csv")
predict_match("Crusaders","Melbourne Rebels",2,2014)
predict_match("Crusaders","Melbourne Rebels",2,2015)
source('C:/Users/ausxx000/Desktop/SuperRugby/GetSRData.R')
source('C:/Users/ausxx000/Desktop/SuperRugby/SRTrainModel.R')
predict_match("Crusaders","Melbourne Rebels",2,2014)
predict_match("Crusaders","Melbourne Rebels",2,2015)
predict_match("Crusaders","Melbourne Rebels",2,2013)
predict_match("Crusaders","Melbourne Rebels",2,2012)
data <- readRDS("NRLData.rda")
teamNames<-unique(data[2])
str(teamNames)
teamNames
teamNames_home<-unique(data[2])
teamNames_away<-unique(data[3])
teamNames_away
str(teamNames_home)
str(teamNames_away)
saveRDS(teamNames_home, "NRLTeams.rda")
teamNames_away[1]
teamNames_away[2]
teamNames_away[[1]][1]
teamNames_away
as.data.frame(teamNames_home)
t<-as.data.frame(teamNames_home)
t[1]
t[1,1]
t[1,2]
t[2,1]
t[3,1]
t[4,1]
t[17,1]
which(teamNames_home=="Sydney")
which(teamNames_home=="Canterbury")
t<-list()
t<-c("sydney","sydney","a","b","c","a")
unique(t)
as.data.frame(unique(t))
nrow(as.data.frame(unique(t)))
tt<-as.data.frame(unique(t))
tt[1]
tt[1,1]
gsub(" ","-",teamNames_home[1,1])
gsub(" ","-",teamNames_home[2,1])
gsub(" ","-",teamNames_home[3,1])
gsub(" ","-",teamNames_home[4,1])
urlTeams<-gsub(" ","-","South Sydney")
urlTeamStats<- gsub(" ","",paste("http://www.rugbyleagueproject.org/teams/",urlTeams,"/records.html",seq=""),fixed=TRUE)
tabs3<- getURL(tolower(urlTeamStats))
tabs3<- readHTMLTable(tabs3, stringsAsFactors = F)
library(XML)
library(RCurl)
library(lubridate)
urlTeams<-gsub(" ","-","South Sydney")
urlTeamStats<- gsub(" ","",paste("http://www.rugbyleagueproject.org/teams/",urlTeams,"/records.html",seq=""),fixed=TRUE)
tabs3<- getURL(tolower(urlTeamStats))
tabs3<- readHTMLTable(tabs3, stringsAsFactors = F)
str(tabs3)
urlTeams
tolower(urlTeamStats)
getURL("http://www.rugbyleagueproject.org/teams/south-sydney/records.html")
urlTeamStats
tabs3
tabs3<- getURL(tolower(urlTeamStats))
tabs3
tabs3<- readHTMLTable(tabs3, stringsAsFactors = F)
tabs3<- getURL(tolower(urlTeamStats))
htmlTreeParse(tabs3, useInternal=TRUE)
t<-htmlTreeParse(urlTeamStats, useInternal=TRUE)
t
str(t)
readHTMLList(t)
tt<-readHTMLList(t)
str(tt)
tt[[2]]
tt[[2]][1]
tt[[2]][1,1]
tt[[3]][1]
tt[[5]][1]
tt[[4]][1]
tt[[5]][1,1]
tt[[5]][2]
tt[[5]][1,2]
tt[[5]][[1]]
tt[[3]][[1]]
tt[[2]][[1]]
tt[[2]]
tt[[3]]
tt[[4]]
tt[[5]]
str(tt)
tt<-readHTMLList(t,xmlValue())
tt<-readHTMLList(t,elFun=xmlValue())
xpathSApply(t, "//h3", xmlValue)
t_nrl<-xpathSApply(t, "//h3", xmlValue)
tt[[which(t_nrl=="NRL")]]
t_nrl<-data.frame(xpathSApply(t, "//h3", xmlValue))
tt[[which(t_nrl=="NRL")]]
t_nrl
which(t_nrl=="NRL")
tt[[5]]
str(tt)
pos<-which(t_nrl=="NRL")+5
pos
tt[[pos]]
pos<-which(t_nrl=="NRL")+4
tt[[pos]]
urlTeams<-gsub(" ","-","South Sydney")
urlTeamStats<- gsub(" ","",paste("http://www.rugbyleagueproject.org/teams/",urlTeams,"/records.html",seq=""),fixed=TRUE)
doc <- htmlTreeParse(tolower(urlTeamStats), useInternal=TRUE)
competition <- data.frame(xpathSApply(doc, "//h3", xmlValue))
pos <- which(competition=="NRL")+4
TeamStats<-doc[[pos]]
print(TeamStats)
do
doc
str(doc)
competition
pos
urlTeams<-gsub(" ","-","South Sydney")
urlTeamStats<- gsub(" ","",paste("http://www.rugbyleagueproject.org/teams/",urlTeams,"/records.html",seq=""),fixed=TRUE)
doc <- htmlTreeParse(tolower(urlTeamStats), useInternal=TRUE)
stats<-readHTMLlist(tolower(urlTeamStats))
competition <- data.frame(xpathSApply(doc, "//h3", xmlValue))
pos <- which(competition=="NRL")+4
TeamStats<-stats[[pos]]
print(TeamStats)
urlTeams<-gsub(" ","-","South Sydney")
urlTeamStats<- gsub(" ","",paste("http://www.rugbyleagueproject.org/teams/",urlTeams,"/records.html",seq=""),fixed=TRUE)
doc <- htmlTreeParse(tolower(urlTeamStats), useInternal=TRUE)
stats<-readHTMLList(tolower(urlTeamStats))
competition <- data.frame(xpathSApply(doc, "//h3", xmlValue))
pos <- which(competition=="NRL")+4
TeamStats<-stats[[pos]]
print(TeamStats)
TeamStats[[1]]
str(TeamStats)
TeamStats[[2]]
TeamStats[[1]][1]
TeamStats[[1]][2]
TeamStats[[1]][3]
TeamStats[1
]
TeamStats[1,1
]
TeamStats[,1]
TeamStats[1]
TeamStats[2]
TeamStats[1][1]
TeamStats[1][2]
TeamStats[1][1,1]
TeamStats[[1]][1]
TeamStats[[0]][1]
TeamStats[[0]]
TeamStats[[1]]
TeamStats[[2]]
TeamStats[[1]][1]
TeamStats[[1]][[1]]
TeamStats
TeamStats[1]
TeamStats[1][1]
TeamStats[1][1]
TeamStats[1][[1]]
TeamStats[1][[2]]
TeamStats[1,]
TeamStats[,1]
TeamStats[]
TeamStats[1]
str(TeamStats[1])
attr(TeamStats[1])
attr(TeamStats[1],"names")
data.frame(teamNames_home)
data.frame(TeamStats)
ttt<-data.frame(TeamStats)
ttt[7]
ttt[1,7]
ttt[1]
ttt[2]
ttt[1][1]
ttt[1,1
]
ttt[1,7]
ttt[1,2]
ttt[7,1]
teamNames
source('~/Documents/SuperRugby/test_1.R')
str(TeamStats)
TeamStats<-NULL
TeamStats_tmp<-stats[[pos]]
attr(TeamStats)
attr(TeamStats,"names")
attr(TeamStats_tmp,"names")
attr(TeamStats_tmp[1],"names")
attr(TeamStats_tmp[[1],"names")
attr(TeamStats_tmp[[1]],"names")
attr(TeamStats_tmp[,1],"names")
attr(TeamStats_tmp[1,],"names")
attr(TeamStats_tmp[1],"names")
attr(TeamStats_tmp[2],"names")
attr(TeamStats_tmp[3],"names")
length(TeamStats_tmp)
attr(TeamStats_tmp[19],"names")
attr(TeamStats_tmp[12],"names")
attr(TeamStats_tmp[8],"names")
attr(TeamStats_tmp[10],"names")
attr(TeamStats_tmp[13],"names")
attr(TeamStats_tmp,"names")
varStats<-data.frame
varStats<-data.frame()
TeamStats_tmp[12]
TeamStats_tmp[10]
varStars[1]<-a
varStars[1]<-1
varStart[1]<-1
varStats[1]<-1
varStats[1]<-c(1,2,3,4,5,6)
varStats.append()
varStats<-data.frame(c("Team","MatchedPlayed"))
str(varStats)
varStats
dataColNames <- c("Outcome","HomeTeam","AwayTeam","HomeScores","AwayScores","Date","Month","Year","HomeHalfScores","HomeScrums","HomePenalties",
"AwayHalfScores","AwayScrums","AwayPenalties")
colnames(varStats) <- dataColNames
c("a","b")
list("a","b")
data.frame(list("a","b"))
TeamStats_tmp[1]
TeamStats_tmp[[1]
]
stats<-list()
stats<-list()
for(i in 1:6){
stats<-append(stats,as.numeric(TeamStats_tmp[[i]]))
}
margin<-stats[5]-stats[6]
margin_avg<-margin/stats[1]
for_avg<-stats[5]/stats[1]
against_avg<-stats[6]/stats[1]
stats<-append(stats,for_avg,against_avg,margin,margin_avg)
stats
gstub(",","",TeamStats_tmp[[1]])
gsub(",","",TeamStats_tmp[[1]])
as.numeric(gsub(",","",TeamStats_tmp[[1]]))
stats<-NULL
stats<-list()
for(i in 1:6){
if(!is.na(as.numeric(TeamStats_tmp[[i]]))){
stats<-append(stats,as.numeric(TeamStats_tmp[[i]]))
}
else
{
stats<-append(stats,as.numeric(gstub(",","",TeamStats_tmp[[i]])))
}
}
for(i in 1:6){
if(!is.na(as.numeric(TeamStats_tmp[[i]]))){
stats<-append(stats,as.numeric(TeamStats_tmp[[i]]))
}
else
{
stats<-append(stats,as.numeric(gsub(",","",TeamStats_tmp[[i]])))
}
}
stats
margin<-stats[5]-stats[6]
margin_avg<-margin/stats[1]
for_avg<-stats[5]/stats[1]
against_avg<-stats[6]/stats[1]
stats[5]
stats[[5]]
margin<-stats[[5]]-stats[[6]]
margin_avg<-margin/stats[[1]]
for_avg<-stats[[5]]/stats[[1]]
against_avg<-stats[[6]]/stats[[1]]
stats<-append(stats,stats[[5]]-stats[[6]])
stats<-append(stats,stats[[7]]/stats[[1]])
stats<-append(stats,stats[[5]]/stats[[1]])
stats<-append(stats,stats[[6]]/stats[[1]])
stats
stats<-NULL
stats<-list()
stats<-"South Sydney"
for(i in 1:6){
if(!is.na(as.numeric(TeamStats_tmp[[i]]))){
stats<-append(stats,as.numeric(TeamStats_tmp[[i]]))
}
else
{
stats<-append(stats,as.numeric(gsub(",","",TeamStats_tmp[[i]])))
}
}
stats<-append(stats,stats[[5]]-stats[[6]])
stats<-append(stats,stats[[7]]/stats[[1]])
stats<-append(stats,stats[[5]]/stats[[1]])
stats<-append(stats,stats[[6]]/stats[[1]])
varList<-data.frame(stats)
stats[[5]]
stats
stats<-NULL
stats<-list()
for(i in 1:6){
if(!is.na(as.numeric(TeamStats_tmp[[i]]))){
stats<-append(stats,as.numeric(TeamStats_tmp[[i]]))
}
else
{
stats<-append(stats,as.numeric(gsub(",","",TeamStats_tmp[[i]])))
}
}
stats<-append(stats,stats[[5]]-stats[[6]])
stats<-append(stats,stats[[7]]/stats[[1]])
stats<-append(stats,stats[[5]]/stats[[1]])
stats<-append(stats,stats[[6]]/stats[[1]])
varList<-data.frame("South Sydney",stats)
varList
